// It is important to provide high-resolution imagery for accurate soil classification.
//
// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Soil type classification and surface water identification flow.
 *
 * - classifySoil - A function that handles the soil classification process.
 * - ClassifySoilInput - The input type for the classifySoil function.
 * - ClassifySoilOutput - The return type for the classifySoil function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClassifySoilInputSchema = z.object({
  photoDataUri: z.array(
 z
 .string()
    .describe(
      "A photo of the area, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
 )
 ).describe('Multiple photos of the area for analysis.'),
  locationContext: z.string().describe('The city, state and nearby locations.'),
  geospatialContext: z.string().optional().describe('Geospatial context for the analysis, potentially including GeoJSON or other relevant data.'),
});
export type ClassifySoilInput = z.infer<typeof ClassifySoilInputSchema>;

const ClassifySoilOutputSchema = z.object({
  soilType: z
    .string()
    .describe('The classification of the soil type (rocky, sandy, clay, etc.).'),
  surfaceWater: z.boolean().describe('Whether surface water is present or not.'),
  confidence: z.number().describe('Confidence level of the soil type classification (0-1).'),
  reasoning: z.string().describe('Reasoning behind the classification.'),
});
export type ClassifySoilOutput = z.infer<typeof ClassifySoilOutputSchema>;

export async function classifySoil(input: ClassifySoilInput): Promise<ClassifySoilOutput> {
  return classifySoilFlow(input);
}

const prompt = ai.definePrompt({
  name: 'classifySoilPrompt',
  input: {schema: ClassifySoilInputSchema},
  output: {schema: ClassifySoilOutputSchema},
  prompt: `You are an expert in soil science and remote sensing. Analyze the provided images, location context, and geospatial context to classify the soil type and identify the presence of surface water.

<CODE_BLOCK>
Thought:
1. Analyze each image for visual cues related to soil type (color, texture, structure).
2. Examine images for the presence of surface water.
3. Consider the location context and geospatial context to corroborate visual findings and refine the classification.
4. Determine the most likely soil type and surface water presence.
5. Assess the confidence level based on the clarity of visual cues and consistency with contextual data.
6. Provide a clear reasoning process.
</CODE_BLOCK>

Example Input:
Images: [Image of reddish soil, Image of dry, cracked earth]
Location Context: Arizona, USA
Geospatial Context: {"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Point","coordinates":[-111,34]}}]}

Example Output:
<CODE_BLOCK>
Thought:
1. Images show reddish soil color and signs of dryness.
2. Location in Arizona, a generally arid region, supports the visual cues.
3. Geospatial context (a point location) provides general regional information but no specific local soil data.
4. Based on the reddish color and dryness, the soil type is likely Aridisol, a common soil in arid climates.
5. No surface water is visible in the images.
6. Confidence is high due to consistent visual cues and location context.
</CODE_BLOCK>
{
  "soilType": "Aridisol",
  "surfaceWater": false,
  "confidence": 0.9,
  "reasoning": "The images display reddish soil and characteristics of dryness, consistent with Aridisols found in arid regions like Arizona. No surface water was detected."
}

Analyze the following images:
{{#each photoDataUri}}
{{media url=this}}{{/each}}

Location Context: {{{locationContext}}}

Based on your analysis, provide the soil type classification (rocky, sandy, clay, etc.), indicate whether surface water is present, a confidence level, and explain your reasoning.

Ensure that the soilType is very descriptive and the reasoning is easy to follow for a non-expert.

Format your output as a JSON object.
`,
});

const classifySoilFlow = ai.defineFlow(
  {
    name: 'classifySoilFlow',
    inputSchema: ClassifySoilInputSchema,
    outputSchema: ClassifySoilOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
